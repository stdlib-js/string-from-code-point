{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar format = require( '@stdlib/string-format' );\nvar UNICODE_MAX = require( '@stdlib/constants-unicode-max' );\nvar UNICODE_MAX_BMP = require( '@stdlib/constants-unicode-max-bmp' );\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\n\n// Factor to rescale a code point from a supplementary plane:\nvar Ox10000 = 0x10000|0; // 65536\n\n// Factor added to obtain a high surrogate:\nvar OxD800 = 0xD800|0; // 55296\n\n// Factor added to obtain a low surrogate:\nvar OxDC00 = 0xDC00|0; // 56320\n\n// 10-bit mask: 2^10-1 = 1023 => 0x3ff => 00000000 00000000 00000011 11111111\nvar Ox3FF = 1023|0;\n\n\n// MAIN //\n\n/**\n* Creates a string from a sequence of Unicode code points.\n*\n* ## Notes\n*\n* -   UTF-16 encoding uses one 16-bit unit for non-surrogates (U+0000 to U+D7FF and U+E000 to U+FFFF).\n* -   UTF-16 encoding uses two 16-bit units (surrogate pairs) for U+10000 to U+10FFFF and encodes U+10000-U+10FFFF by subtracting 0x10000 from the code point, expressing the result as a 20-bit binary, and splitting the 20 bits of 0x0-0xFFFFF as upper and lower 10-bits. The respective 10-bits are stored in two 16-bit words: a high and a low surrogate.\n*\n*\n* @param {...NonNegativeInteger} args - sequence of code points\n* @throws {Error} must provide either an array-like object of code points or one or more code points as separate arguments\n* @throws {TypeError} a code point must be a nonnegative integer\n* @throws {RangeError} must provide a valid Unicode code point\n* @returns {string} created string\n*\n* @example\n* var str = fromCodePoint( 9731 );\n* // returns '☃'\n*/\nfunction fromCodePoint( args ) {\n\tvar len;\n\tvar str;\n\tvar arr;\n\tvar low;\n\tvar hi;\n\tvar pt;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 1 && isCollection( args ) ) {\n\t\tarr = arguments[ 0 ];\n\t\tlen = arr.length;\n\t} else {\n\t\tarr = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tarr.push( arguments[ i ] );\n\t\t}\n\t}\n\tif ( len === 0 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide either an array of code points or one or more code points as separate arguments.' );\n\t}\n\tstr = '';\n\tfor ( i = 0; i < len; i++ ) {\n\t\tpt = arr[ i ];\n\t\tif ( !isNonNegativeInteger( pt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide valid code points (nonnegative integers). Value: `%s`.', pt ) );\n\t\t}\n\t\tif ( pt > UNICODE_MAX ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Must provide a valid code point (cannot exceed max). Value: `%s`.', pt ) );\n\t\t}\n\t\tif ( pt <= UNICODE_MAX_BMP ) {\n\t\t\tstr += fromCharCode( pt );\n\t\t} else {\n\t\t\t// Code point from a supplementary plane. Split into two 16-bit code units (surrogate pair).\n\t\t\tpt -= Ox10000;\n\t\t\thi = (pt >> 10) + OxD800;\n\t\t\tlow = (pt & Ox3FF) + OxDC00;\n\t\t\tstr += fromCharCode( hi, low );\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromCodePoint;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a string from a sequence of Unicode code points.\n*\n* @module @stdlib/string-from-code-point\n*\n* @example\n* var fromCodePoint = require( '@stdlib/string-from-code-point' );\n*\n* var str = fromCodePoint( 9731 );\n* // returns '☃'\n*/\n\n// MODULES //\n\nvar fromCodePoint = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromCodePoint;\n"],"names":["isNonNegativeInteger","require$$0","isPrimitive","isCollection","require$$1","format","require$$2","UNICODE_MAX","require$$3","UNICODE_MAX_BMP","require$$4","fromCharCode","String","lib","args","len","str","arr","pt","i","arguments","length","push","Error","TypeError","RangeError"],"mappings":";;gcAsBA,IAAIA,EAAuBC,EAAmDC,YAC1EC,EAAeC,EACfC,EAASC,EACTC,EAAcC,EACdC,EAAkBC,EAKlBC,EAAeC,OAAOD,aAmF1B,IC3EAE,ED4BA,SAAwBC,GACvB,IAAIC,EACAC,EACAC,EAGAC,EACAC,EAGJ,GAAa,KADbJ,EAAMK,UAAUC,SACElB,EAAcW,GAE/BC,GADAE,EAAMG,UAAW,IACPC,YAGV,IADAJ,EAAM,GACAE,EAAI,EAAGA,EAAIJ,EAAKI,IACrBF,EAAIK,KAAMF,UAAWD,IAGvB,GAAa,IAARJ,EACJ,MAAM,IAAIQ,MAAO,+HAGlB,IADAP,EAAM,GACAG,EAAI,EAAGA,EAAIJ,EAAKI,IAAM,CAE3B,GADAD,EAAKD,EAAKE,IACJnB,EAAsBkB,GAC3B,MAAM,IAAIM,UAAWnB,EAAQ,wFAAyFa,IAEvH,GAAKA,EAAKX,EACT,MAAM,IAAIkB,WAAYpB,EAAQ,sFAAuFa,IAGrHF,GADIE,GAAMT,EACHE,EAAcO,GAMdP,EApEG,QAiEVO,GApEW,QAqEC,IA/DF,OAGD,KA6DFA,IAIT,OAAOF"}